<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\I18n\Time;
use Cake\I18n\FrozenTime;
use Cake\Http\Client;
use Cake\Filesystem\Folder;
use Cake\Filesystem\File;
use Cake\ORM\TableRegistry;

/**
 * Items Controller
 *
 * @property \App\Model\Table\ItemsTable $Items
 * @method \App\Model\Entity\Item[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ItemsController extends AppController
{
    private $loginUser;

    public function initialize(): void
    {
        parent::initialize();
    }

    public function beforeFilter(\Cake\Event\EventInterface $event)
    {
        parent::beforeFilter($event);

        // loginUser --- Authentication コンポーネントで取得
        $this->loginUser = $this->Authentication->getIdentity();
        //debug($this->loginUser);

        // example get Identity Objects
        //$identity = $this->Authentication->getIdentity();
        //debug($identity);
        //debug($identity->getIdentifier());
        //debug($identity->get('email'));
        //debug($identity->get('name'));
        
        $this->Authentication->allowUnauthenticated(['new-index', 'set-csv-name']);
    }

    public function getItemsObj(){
        $this->autoLayout = false;
        $this->autoRender = false;
        //$this->viewBuilder()->setLayout('new_layout');
        /** 
        $this->paginate = [
            'contain' => ['Users'],
            'limit' => 10
        ];
        */

        $category_list = array_values(array_unique($this->Items->find()->all()->extract('category')->toArray()));
        $this->set('category_list', $category_list);
        //debug($category_list);

        $result = "";
        if ($this->request->isPost()){
            //$result = $this->request->data['select-1']; <-- old expression
            $result = $this->request->getData('select-1');
            //debug($result);
        }
        //debug($category_list[$result]);
        //debug($this->loginUser);
        if ( $result == null) {
            //$items = $this->Items->find('all');
            $items = $this->Items->find()->where(['user_id =' => $this->loginUser->id]);
            debug($items);
        }   else {
            $items = $this->Items->find()->where(['user_id =' => $this->loginUser->id])->where(['category =' => $category_list[$result]]);
            debug($items);
        }
        $this->setAction('buildItemsProp', $items);
        //$this->set('items', $this->paginate($items));
    }

    public function buildItemsProp($items){
        $this->autoLayout = false;
        $this->autoRender = false;
        debug($items);

        // build Items Properties
        echo "This is buldItemArray() method !!" . "<br><br>";

        // Product テーブルからjancodeをキーにして商品情報を検索し、 private $itemArray = [] に格納する
        // 検索した商品情報を AddItemContoroller 内で共有する
        // productsテーブルのオブジェクトを取得
        $productsTable = TableRegistry::getTableLocator()->get('Products');
        //debug($productsTable);
        // set $itemArray
        $itemArray = $this->itemArray;
        // $itemArray のインデックスの初期値
        $idx = 0;
        //debug($jancodeList2);
        foreach ($jancodeList2 as $jcode){
            // $jancodeList[n] から $jancode[4] を取り出してProduct テーブルを検索する
            // 結果のイメージ、janCode、商品名を、配列 $itemArray へ格納する
            //$jcode = $jancode[4];
            //debug($jcode);
            // get products object from Products table
            $product = $productsTable->find()
                ->where(['jancode =' => $jcode])
                ->all()
                ->toArray();
            //debug($product);
            if($product != null){
                // Query Success 
                // extract itemImage, janCode, itemName
                $itemArray[$idx]['jancode'] = $product[0]['jancode'];
                // itemName
                $itemArray[$idx]['pname'] = $product[0]['pname'];
                // itemBrand
                $itemArray[$idx]['brand'] = $product[0]['brand'];
                // ctegories
                $itemArray[$idx]['category'] = $product[0]['category'];
                // itemImage
                $itemArray[$idx]['image'] = $product[0]['image'];
                // url
                $itemArray[$idx]['site'] = $product[0]['site'];
                // store empty
                $itemArray[$idx]['store'] = null;
                //debug($itemArray[$idx]);
            } else {
                echo "Can not get Item Info from Products Table" . "<br>";
            }
            $idx++;
        }
        //debug($itemArray);
        // go echo_item_list
        //$this->setAction('echoItemList', $itemArray);
        // go storItem()
        //$this->setAction('storeItem', $itemArray);

    }     

    public function newIndex(){
        $this->autoLayout = true;
        $this->autoRender = true;
        $this->viewBuilder()->setLayout('new_layout');

        $this->paginate = [
            'contain' => ['Users'],
            'limit' => 10
        ];

        $category_list = array_values(array_unique($this->Items->find()->all()->extract('category')->toArray()));
        $this->set('category_list', $category_list);
        //debug($category_list);

        $result = "";
        if ($this->request->isPost()){
            //$result = $this->request->data['select-1']; <-- old expression
            $result = $this->request->getData('select-1');
            //debug($result);
        }
        //debug($category_list[$result]);
        //debug($this->loginUser);
        if ( $result == null) {
            //$items = $this->Items->find('all');
            $items = $this->Items->find()->where(['user_id =' => $this->loginUser->id]);
            //debug($items);
        }   else {
            $items = $this->Items->find()->where(['user_id =' => $this->loginUser->id])->where(['category =' => $category_list[$result]]);
            //debug($items);
        }
        $this->set('items', $this->paginate($items));
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users', 'Products'],
        ];

        $items = $this->paginate($this->Items);
        $this->set(compact('items'));
    }

    /**
     * View method
     *
     * @param string|null $id Item id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $item = $this->Items->get($id, [
            'contain' => ['Users'],
        ]);

        $this->set(compact('item'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $item = $this->Items->newEmptyEntity();
        $item->created = Time::now();
        $item->modified = Time::now();
        if ($this->request->is('post')) {
            $item = $this->Items->patchEntity($item, $this->request->getData());
            if ($this->Items->save($item)) {
                $this->Flash->success(__('The item has been saved.'));
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The item could not be saved. Please, try again.'));
        }
        $users = $this->Items->Users->find('list', ['limit' => 200])->all();
        $this->set(compact('item', 'users'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Item id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $item = $this->Items->get($id, [
            'contain' => [],
        ]);
        $created = $item->created;
        if ($this->request->is(['patch', 'post', 'put'])) {
            $item = $this->Items->patchEntity($item, $this->request->getData());
            $item->created =  $created;
            $item->modified = Time::now();
            if ($this->Items->save($item)) {
                $this->Flash->success(__('The item has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The item could not be saved. Please, try again.'));
        }
        $users = $this->Items->Users->find('list', ['limit' => 200])->all();
        $this->set(compact('item', 'users'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Item id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $item = $this->Items->get($id);
        if ($this->Items->delete($item)) {
            $this->Flash->success(__('The item has been deleted.'));
        } else {
            $this->Flash->error(__('The item could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
